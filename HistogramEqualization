#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <iostream>

using namespace cv;
using namespace std;

int main() {

    // Load the image
    string image_path = "C:/Users/melih/OneDrive/Desktop/portello.jpg";
    Mat src = imread(image_path, IMREAD_COLOR);

    // Histogram of the original image
    vector<Mat> bgr_planes;
    split(src, bgr_planes);
    int histSize = 256;
    float range[] = { 0, 256 };
    const float* histRange[] = { range };
    bool uniform = true, accumulate = false;
    Mat b_hist, g_hist, r_hist;
    calcHist(&bgr_planes[0], 1, 0, Mat(), b_hist, 1, &histSize, histRange, uniform, accumulate);
    calcHist(&bgr_planes[1], 1, 0, Mat(), g_hist, 1, &histSize, histRange, uniform, accumulate);
    calcHist(&bgr_planes[2], 1, 0, Mat(), r_hist, 1, &histSize, histRange, uniform, accumulate);
    int hist_w = 512, hist_h = 400;
    int bin_w = cvRound((double)hist_w / histSize);
    Mat histImage(hist_h, hist_w, CV_8UC3, Scalar(0, 0, 0));
    normalize(b_hist, b_hist, 0, histImage.rows, NORM_MINMAX, -1, Mat());
    normalize(g_hist, g_hist, 0, histImage.rows, NORM_MINMAX, -1, Mat());
    normalize(r_hist, r_hist, 0, histImage.rows, NORM_MINMAX, -1, Mat());
    for (int i = 1; i < histSize; i++)
    {
        line(histImage, Point(bin_w * (i - 1), hist_h - cvRound(b_hist.at<float>(i - 1))),
            Point(bin_w * (i), hist_h - cvRound(b_hist.at<float>(i))),
            Scalar(255, 0, 0), 2, 8, 0);
        line(histImage, Point(bin_w * (i - 1), hist_h - cvRound(g_hist.at<float>(i - 1))),
            Point(bin_w * (i), hist_h - cvRound(g_hist.at<float>(i))),
            Scalar(0, 255, 0), 2, 8, 0);
        line(histImage, Point(bin_w * (i - 1), hist_h - cvRound(r_hist.at<float>(i - 1))),
            Point(bin_w * (i), hist_h - cvRound(r_hist.at<float>(i))),
            Scalar(0, 0, 255), 2, 8, 0);
    }

    imshow("calcHist Demo", histImage);

    // Equalized image and its histogram
    vector<Mat> bgr_eq_planes;
    split(src, bgr_eq_planes);
    for (int i = 0; i < 3; i++) {
        equalizeHist(bgr_eq_planes[i], bgr_eq_planes[i]);
    }
    Mat equalized;
    merge(bgr_eq_planes, equalized);
    vector<Mat> equalized_channels(3);
    split(equalized, equalized_channels);
    Mat b_eq_hist, g_eq_hist, r_eq_hist;
    calcHist(&equalized_channels[0], 1, 0, Mat(), b_eq_hist, 1, &histSize, histRange, uniform, accumulate);
    calcHist(&equalized_channels[1], 1, 0, Mat(), g_eq_hist, 1, &histSize, histRange, uniform, accumulate);
    calcHist(&equalized_channels[2], 1, 0, Mat(), r_eq_hist, 1, &histSize, histRange, uniform, accumulate);
    Mat hist_eq_Image(hist_h, hist_w, CV_8UC3, Scalar(0, 0, 0));
    normalize(b_eq_hist, b_eq_hist, 0, hist_eq_Image.rows, NORM_MINMAX, -1, Mat());
    normalize(g_eq_hist, g_eq_hist, 0, hist_eq_Image.rows, NORM_MINMAX, -1, Mat());
    normalize(r_eq_hist, r_eq_hist, 0, hist_eq_Image.rows, NORM_MINMAX, -1, Mat());
    for (int i = 1; i < histSize; i++)
    {
        line(hist_eq_Image, Point(bin_w * (i - 1), hist_h - cvRound(b_eq_hist.at<float>(i - 1))),
            Point(bin_w * (i), hist_h - cvRound(b_eq_hist.at<float>(i))),
            Scalar(255, 0, 0), 2, 8, 0);
        line(hist_eq_Image, Point(bin_w * (i - 1), hist_h - cvRound(g_eq_hist.at<float>(i - 1))),
            Point(bin_w * (i), hist_h - cvRound(g_eq_hist.at<float>(i))),
            Scalar(0, 255, 0), 2, 8, 0);
        line(hist_eq_Image, Point(bin_w * (i - 1), hist_h - cvRound(r_eq_hist.at<float>(i - 1))),
            Point(bin_w * (i), hist_h - cvRound(r_eq_hist.at<float>(i))),
            Scalar(0, 0, 255), 2, 8, 0);
    }



    // Denoise with median blur
    Mat median_blur;
    medianBlur(src, median_blur, 3);

    // Denoise with Gaussian blur
    Mat gaussian_blur;
    GaussianBlur(src, gaussian_blur, Size(3, 3), 0);

    // Denoise with bilateral filter
    Mat bilateral_filter;
    bilateralFilter(src, bilateral_filter, 15, 75, 75);



    imshow("Source Image", src);
    imshow("Equalized Image", equalized);
    imshow("Equalized Image Histogram", hist_eq_Image);


    
    imshow("Median blur", median_blur);
    imshow("Gaussian blur", gaussian_blur);
    imshow("Bilateral filter", bilateral_filter);
   
    waitKey();
    return EXIT_SUCCESS;
}
